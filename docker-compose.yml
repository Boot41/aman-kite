version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kite-postgres
    environment:
      POSTGRES_DB: stockapp
      POSTGRES_USER: aman
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - kite-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aman -d stockapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: kite-backend
    environment:
      DATABASE_URL: postgresql://aman:${POSTGRES_PASSWORD:-defaultpassword}@postgres:5432/stockapp
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-change-this-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      DEBUG: ${DEBUG:-False}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kite-network
    volumes:
      - ./server:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./client/web
      dockerfile: Dockerfile
    container_name: kite-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - kite-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kite-redis
    ports:
      - "6379:6379"
    networks:
      - kite-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  kite-network:
    driver: bridge
